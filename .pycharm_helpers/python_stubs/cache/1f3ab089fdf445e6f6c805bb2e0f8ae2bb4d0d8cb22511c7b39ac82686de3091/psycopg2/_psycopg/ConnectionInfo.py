# encoding: utf-8
# module psycopg2._psycopg
# from /usr/local/lib/python3.6/dist-packages/psycopg2/_psycopg.cpython-36m-x86_64-linux-gnu.so
# by generator 1.147
""" psycopg2 PostgreSQL driver """

# imports
import psycopg2 as __psycopg2
import psycopg2.extensions as __psycopg2_extensions


from .object import object

class ConnectionInfo(object):
    """
    Details about the native PostgreSQL database connection.
    
    This class exposes several `informative functions`__ about the status
    of the libpq connection.
    
    Objects of this class are exposed as the `connection.info` attribute.
    
    .. __: https://www.postgresql.org/docs/current/static/libpq-status.html
    """
    def parameter_status(self, *args, **kwargs): # real signature unknown
        """
        Looks up a current parameter setting of the server.
        
        :param name: The name of the parameter to return.
        :type name: `!str`
        :return: The parameter value, `!None` if the parameter is unknown.
        :rtype: `!str`
        
        .. seealso:: libpq docs for `PQparameterStatus()`__ for details.
        .. __: https://www.postgresql.org/docs/current/static/libpq-status.html#LIBPQ-PQPARAMETERSTATUS
        """
        pass

    def ssl_attribute(self, *args, **kwargs): # real signature unknown
        """
        Returns SSL-related information about the connection.
        
        :param name: The name of the attribute to return.
        :type name: `!str`
        :return: The attribute value, `!None` if unknown.
        :rtype: `!str`
        
        Only available if psycopg was built with libpq >= 9.5; raise
        `~psycopg2.NotSupportedError` otherwise.
        
        Valid names are available in `ssl_attribute_names`.
        
        .. seealso:: libpq docs for `PQsslAttribute()`__ for details.
        .. __: https://www.postgresql.org/docs/current/static/libpq-status.html#LIBPQ-PQSSLATTRIBUTE
        """
        pass

    def __init__(self, *args, **kwargs): # real signature unknown
        pass

    @staticmethod # known case of __new__
    def __new__(*args, **kwargs): # real signature unknown
        """ Create and return a new object.  See help(type) for accurate signature. """
        pass

    backend_pid = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """The process ID (PID) of the backend process you connected to.

:type: `!int`

.. seealso:: libpq docs for `PQbackendPID()`__ for details.
.. __: https://www.postgresql.org/docs/current/static/libpq-status.html#LIBPQ-PQBACKENDPID"""

    dbname = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """The database name of the connection.

.. seealso:: libpq docs for `PQdb()`__ for details.
.. __: https://www.postgresql.org/docs/current/static/libpq-status.html#LIBPQ-PQDB"""

    dsn_parameters = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """The effective connection parameters.

:type: `!dict`

The results include values which weren't explicitly set by the connection
string, such as defaults, environment variables, etc.
The *password* parameter is removed from the results.

.. seealso:: libpq docs for `PQconninfo()`__ for details.
.. __: https://www.postgresql.org/docs/current/libpq-connect.html#LIBPQ-PQCONNINFO"""

    error_message = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """The error message most recently generated by an operation on the connection.

`!None` if there is no current message.

.. seealso:: libpq docs for `PQerrorMessage()`__ for details.
.. __: https://www.postgresql.org/docs/current/static/libpq-status.html#LIBPQ-PQERRORMESSAGE"""

    host = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """The server host name of the connection.

This can be a host name, an IP address, or a directory path if the
connection is via Unix socket. (The path case can be distinguished
because it will always be an absolute path, beginning with ``/``.)

.. seealso:: libpq docs for `PQhost()`__ for details.
.. __: https://www.postgresql.org/docs/current/static/libpq-status.html#LIBPQ-PQHOST"""

    needs_password = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """The connection authentication method required a password, but none was available.

:type: `!bool`

.. seealso:: libpq docs for `PQconnectionNeedsPassword()`__ for details.
.. __: https://www.postgresql.org/docs/current/static/libpq-status.html#LIBPQ-PQCONNECTIONNEEDSPASSWORD"""

    options = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """The command-line options passed in the connection request.

.. seealso:: libpq docs for `PQoptions()`__ for details.
.. __: https://www.postgresql.org/docs/current/static/libpq-status.html#LIBPQ-PQOPTIONS"""

    password = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """The password of the connection.

.. seealso:: libpq docs for `PQpass()`__ for details.
.. __: https://www.postgresql.org/docs/current/static/libpq-status.html#LIBPQ-PQPASS"""

    port = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """The port of the connection.

:type: `!int`

.. seealso:: libpq docs for `PQport()`__ for details.
.. __: https://www.postgresql.org/docs/current/static/libpq-status.html#LIBPQ-PQPORT"""

    protocol_version = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """The frontend/backend protocol being used.

:type: `!int`

.. seealso:: libpq docs for `PQprotocolVersion()`__ for details.
.. __: https://www.postgresql.org/docs/current/static/libpq-status.html#LIBPQ-PQPROTOCOLVERSION"""

    server_version = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """Returns an integer representing the server version.

:type: `!int`

.. seealso:: libpq docs for `PQserverVersion()`__ for details.
.. __: https://www.postgresql.org/docs/current/static/libpq-status.html#LIBPQ-PQSERVERVERSION"""

    socket = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """The file descriptor number of the connection socket to the server.

:type: `!int`

.. seealso:: libpq docs for `PQsocket()`__ for details.
.. __: https://www.postgresql.org/docs/current/static/libpq-status.html#LIBPQ-PQSOCKET"""

    ssl_attribute_names = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """The list of the SSL attribute names available.

:type: `!list` of `!str`

Only available if psycopg was built with libpq >= 9.5; raise
`~psycopg2.NotSupportedError` otherwise.

.. seealso:: libpq docs for `PQsslAttributeNames()`__ for details.
.. __: https://www.postgresql.org/docs/current/static/libpq-status.html#LIBPQ-PQSSLATTRIBUTENAMES"""

    ssl_in_use = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """`!True` if the connection uses SSL, `!False` if not.

Only available if psycopg was built with libpq >= 9.5; raise
`~psycopg2.NotSupportedError` otherwise.

:type: `!bool`

.. seealso:: libpq docs for `PQsslInUse()`__ for details.
.. __: https://www.postgresql.org/docs/current/static/libpq-status.html#LIBPQ-PQSSLINUSE"""

    status = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """The status of the connection.

:type: `!int`

.. seealso:: libpq docs for `PQstatus()`__ for details.
.. __: https://www.postgresql.org/docs/current/static/libpq-status.html#LIBPQ-PQSTATUS"""

    transaction_status = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """The current in-transaction status of the connection.

Symbolic constants for the values are defined in the module
`psycopg2.extensions`: see :ref:`transaction-status-constants` for the
available values.

:type: `!int`

.. seealso:: libpq docs for `PQtransactionStatus()`__ for details.
.. __: https://www.postgresql.org/docs/current/static/libpq-status.html#LIBPQ-PQTRANSACTIONSTATUS"""

    used_password = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """The connection authentication method used a password.

:type: `!bool`

.. seealso:: libpq docs for `PQconnectionUsedPassword()`__ for details.
.. __: https://www.postgresql.org/docs/current/static/libpq-status.html#LIBPQ-PQCONNECTIONUSEDPASSWORD"""

    user = property(lambda self: object(), lambda self, v: None, lambda self: None)  # default
    """The user name of the connection.

.. seealso:: libpq docs for `PQuser()`__ for details.
.. __: https://www.postgresql.org/docs/current/static/libpq-status.html#LIBPQ-PQUSER"""



